MATRIX_DIVIDED TESTFILE BY PHOENIX
============== START ===============

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

case test module docstring lenght:
>>> mDocs = __import__('2-matrix_divided').__doc__
>>> len(mDocs) > 5
True

case test function docstring lenght:
>>> fDocs = matrix_divided.__doc__
>>> len(fDocs) > 5
True

case of all integer list of list and div as int:
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

case of float and int values in list:
>>> matrix = [[0, 10.15, 2], [3, 4.67, 5]]
>>> matrix_divided(matrix, 2)
[[0.0, 5.08, 1.0], [1.5, 2.33, 2.5]]

case of string in list:
>>> matrix = [[0, 10.15, 2], ["hello", 4.67, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case of tuple in list:
>>> matrix = [[0, (2, 5), 2], [3, 4.67, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case of dictionaries in list:
>>> matrix = [[0, 1, 2], [3, {2, 4}, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case of boolean in list:
>>> matrix = [[0, True, 2], [3, 4, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case of uneven rows of the matrix:
>>> matrix = [[0, 3, 1], [3, 4, 6, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

case of div as float:
>>> matrix = [[0, 3, 1], [3, 4, 6]]
>>> matrix_divided(matrix, 2.5)
[[0.0, 1.2, 0.4], [1.2, 1.6, 2.4]]

case of div as 0:
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero

case of div as negative value:
>>> matrix_divided(matrix, -2)
[[-0.0, -1.5, -0.5], [-1.5, -2.0, -3.0]]

case of div as string:
>>> matrix_divided(matrix, "he")
Traceback (most recent call last):
	...
TypeError: div must be a number

case of div as bool:
>>> matrix_divided(matrix, True)
Traceback (most recent call last):
        ...
TypeError: div must be a number

case of div as list:
>>> matrix_divided(matrix, [1, 2])
Traceback (most recent call last):
        ...
TypeError: div must be a number

case of div as tuple:
>>> matrix_divided(matrix, (2, 1))
Traceback (most recent call last):
        ...
TypeError: div must be a number

case of div as dict:
>>> matrix_divided(matrix, {2, 3})
Traceback (most recent call last):
        ...
TypeError: div must be a number

case of not enough arguments:
>>> matrix_divided(matrix)
Traceback (most recent call last):
        ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

case of no arguments:
>>> matrix_divided()
Traceback (most recent call last):
        ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

case of too many  arguments:
>>> matrix_divided(matrix, 2, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_divided() takes 2 positional arguments but 3 were given

================= END ==================
